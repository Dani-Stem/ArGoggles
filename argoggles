import cv2
import mediapipe as mp
import time
import math
import numpy as np
import random

class handDetector():
    def __init__(self, mode=False, maxHands=2, complexity=0, detectionCon=0.5, trackCon=0.5):
        self.mode = mode
        self.maxHands = maxHands
        self.detectionCon = detectionCon
        self.trackCon = trackCon
        self.complexity = complexity

        self.mpHands = mp.solutions.hands
        self.hands = self.mpHands.Hands(self.mode, self.maxHands, self.complexity,
        self.detectionCon, self.trackCon)
        self.mpDraw = mp.solutions.drawing_utils
        self.tipIds = [4, 8, 12, 16, 20]

    def findHands(self, img, draw=True):
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.results = self.hands.process(imgRGB)
        # print(results.multi_hand_landmarks)
        #self.results.multi_hand_landmarks = [1]
        if self.results.multi_hand_landmarks:
            for handLms in self.results.multi_hand_landmarks:
                if draw:
                    self.mpDraw.draw_landmarks(img, handLms,
                    self.mpHands.HAND_CONNECTIONS)
        # else:
        #     pass

        return img

    def findPosition(self, img, handNo=0, draw=True):
        xList = []
        yList = []
        bbox = []
        self.lmList = []
        #self.results.multi_hand_landmarks = [1]
        if self.results.multi_hand_landmarks:
            myHand = self.results.multi_hand_landmarks[handNo]
            for id, lm in enumerate(myHand.landmark):
                # print(id, lm)
                h, w, c = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                xList.append(cx)
                yList.append(cy)
                # print(id, cx, cy)
                self.lmList.append([id, cx, cy])
                if draw:
                    cv2.circle(img, (cx, cy), 5, (255, 0, 255), cv2.FILLED)
        # else:
        #     pass

            xmin, xmax = min(xList), max(xList)
            ymin, ymax = min(yList), max(yList)
            bbox = xmin, ymin, xmax, ymax

            if draw:
                cv2.rectangle(img, (xmin - 20, ymin - 20), (xmax + 20, ymax + 20),
                (0, 255, 0), 2)

        return self.lmList, bbox

    def fingersUp(self):
        fingers = []

        if any(self.lmList):
            # Thumb
            if self.lmList[self.tipIds[0]][1] > self.lmList[self.tipIds[0] - 1][1]:
                fingers.append(1)
            else:
                fingers.append(0)

            # Fingers
            for id in range(1, 5):

                if self.lmList[self.tipIds[id]][2] < self.lmList[self.tipIds[id] - 2][2]:
                    fingers.append(1)
                else:
                    fingers.append(0)
                    
                totalFingers = fingers.count(1)
               
            return fingers
        return [0, 0, 0, 0, 0]
    


  

def main():
    pTime = 0
    cTime = 0
    cap = cv2.VideoCapture(0)
    detector = handDetector()
    
    selection = 0
    selection1 = 0
    selection2 = 0
    selection3 = 0
    selection4 = 0  
    
    while True:
        success, img = cap.read()
        img = detector.findHands(img)
        lmList, bbox = detector.findPosition(img)
        if len(lmList) != 0:
            print(lmList[8])

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        #cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3,
        #(255, 0, 255), 3)
        
        
        fingers = detector.fingersUp()


        if fingers[1] == 1 and fingers[0] == 0 and fingers[3] == 0 and fingers[2] == 0 and fingers[4] == 0 and selection == 0:
            selection1 = 1
            selection = 1
        #elif fingers[1] == 1 and fingers[0] == 0 and fingers[3] == 0 and fingers[2] == 1 and fingers[4] == 0 and selection == 0:
            #selection2 = 1
            #selection = 1
#         elif fingers[1] == 1 and fingers[0] == 0 and fingers[3] == 1 and fingers[2] == 1 and fingers[4] == 0 and selection == 0:
#             selection3 = 1
#             selection = 1
#         elif fingers[1] == 1 and fingers[0] == 0 and fingers[3] == 1 and fingers[2] == 1 and fingers[4] == 1 and selection == 0:
#             selection4 = 1
#             selection = 1
            
        if selection1 == 0 and selection2 == 0 and selection3 == 0 and selection4 == 0: 
            new_image = cv2.putText(
            img = img,
            text = "MAIN MENU",
            org = (226, 40),
            fontFace = cv2.FONT_HERSHEY_DUPLEX,
            fontScale = 1.0,
            color = (125, 246, 55),
            thickness = 3
            )
        
            new_image_1 = cv2.putText(
                img = img,
                text = "USE YOUR FINGERS TO SELECT AN OPTION",
                org = (111, 70),
                fontFace = cv2.FONT_HERSHEY_DUPLEX,
                fontScale = .6,
                color = (125, 246, 55),
                thickness = 2
            )
        
            new_image_2 = cv2.putText(
                img = img,
                text = "1.) BALLOON GAME",
                org = (40, 150),
                fontFace = cv2.FONT_HERSHEY_DUPLEX,
                fontScale = 1.1,
                color = (125, 246, 55),
                thickness = 3
            )
            
#             new_image_3 = cv2.putText(
#                 img = img,
#                 text = "2.) OPTION TWO",
#                 org = (40, 210),
#                 fontFace = cv2.FONT_HERSHEY_DUPLEX,
#                 fontScale = 1.1,
#                 color = (125, 246, 55),
#                 thickness = 3
#             )
#         
#             new_image_4 = cv2.putText(
#                 img = img,
#                 text = "3.) OPTION THREE",
#                 org = (40, 270),
#                 fontFace = cv2.FONT_HERSHEY_DUPLEX,
#                 fontScale = 1.1,
#                 color = (125, 246, 55),
#                 thickness = 3
#             )
#             
#             new_image_5 = cv2.putText(
#                 img = img,
#                 text = "4.) OPTION FOUR",
#                 org = (40, 330),
#                 fontFace = cv2.FONT_HERSHEY_DUPLEX,
#                 fontScale = 1.1,
#                 color = (125, 246, 55),
#                 thickness = 3
#             )

        if selection1 == 1:

            new_image_test = cv2.putText(
            img = img,
            text = "BALLOON SELECTED",
            org = (150, 170),
            fontFace = cv2.FONT_HERSHEY_DUPLEX,
            fontScale = 1.1,
            color = (125, 246, 55),
            thickness = 3
            )
            
            new_image_test = cv2.putText(
            img = img,
            text = "PLS CONFIRM USING FINGERS",
            org = (140, 200),
            fontFace = cv2.FONT_HERSHEY_DUPLEX,
            fontScale = 0.8,
            color = (125, 246, 55),
            thickness = 3
            )
            new_image_test = cv2.putText(
            img = img,
            text = "5)YES       0)NO",
            org = (150, 250),
            fontFace = cv2.FONT_HERSHEY_DUPLEX,
            fontScale = 1.1,
            color = (125, 246, 55),
            thickness = 3
            )
            if fingers[0] == 1 and fingers[1] == 0 and fingers[2] == 0 and fingers[3]== 0 and fingers[4] == 0:
                selection = 0
                selection1 = 0
                selection2 = 0
                selection3 = 0
                selection4 = 0
                cv2.destroyWindow("Image")
            elif fingers[0] == 1 and fingers[1] == 1 and fingers[2] == 1 and fingers[3]== 1 and fingers[4] == 1:
                new_image_5 = cv2.putText(
                    img = img,
                    text = "LOADING...",
                    org = (40, 330),
                    fontFace = cv2.FONT_HERSHEY_DUPLEX,
                    fontScale = 1.1,
                    color = (125, 246, 55),
                    thickness = 3
                )
                
                
                while True:
                    success, img = cap.read()
                    img = detector.findHands(img)
                    lmList, bbox = detector.findPosition(img)
                    if len(lmList) != 0:
                        x1, y1 = lmList[8][1:]
                        print(x1, y1)

                    cTime = time.time()
                    fps = 1 / (cTime - pTime)
                    pTime = cTime                    
                    
                    fingers = detector.fingersUp()
                    
                    
                    new_image = cv2.putText(
                        img = img,
                        text = "BALLOON GAME",
                        org = (226, 40),
                        fontFace = cv2.FONT_HERSHEY_DUPLEX,
                        fontScale = 1.0,
                        color = (125, 246, 55),
                        thickness = 3
                    )
                    
                    new_image_5 = cv2.putText(
                        img = img,
                        text = "LOADING...",
                        org = (40, 330),
                        fontFace = cv2.FONT_HERSHEY_DUPLEX,
                        fontScale = 1.1,
                        color = (125, 246, 55),
                        thickness = 3
                    )
                    
                    cv2.imshow("Image", img)

                    cv2.waitKey(1)

                    time.sleep(2)
                    
                    x_cord = random.choice(range(1, 400))
                    y_cord = random.choice(range(1, 300))
#                     lmList_8 = []
#                     lmList_8 = lmList[8]
#                     index_cords= []
#                     index_cords.append([4, x_cord, y_cord])
                    
                    score = 0

                    t = time.localtime()
                    current_time = time.strftime("%S", t)
                    print(current_time)
                    static_current_time = int(current_time)
                    times_up = int(static_current_time) + 15
                    print(str(times_up))


                    
                    while True:
                        success, img = cap.read()
                        img = detector.findHands(img)
                        lmList, bbox = detector.findPosition(img)
                        if len(lmList) != 0:
                            x1, y1 = lmList[8][1:]
                            print(x1, y1)

                        cTime = time.time()
                        fps = 1 / (cTime - pTime)
                        pTime = cTime                    
                        
                        t = time.localtime()
                        current_time = time.strftime("%S", t)
                        count_down = times_up - int(current_time)
                        
                        print(str(count_down))
                        print(current_time)
                        print(str(times_up))

                        fingers = detector.fingersUp()
                        balloonImage = cv2.imread(r"/home/dd/balloon.png")
                        height, width, channels = balloonImage.shape
                        offset = np.array((y_cord, x_cord))
                        img[offset[0]:offset[0] + height, offset[1]:offset[1] + width] = balloonImage
                        
                        moved_x_cord = x_cord + 10
                        moved_y_cord = y_cord + 35
                    
#                         new_image_5 = cv2.putText(                           
#                             img = img,
#                             text = "X",
#                             org = (moved_x_cord, moved_y_cord),
#                             fontFace = cv2.FONT_HERSHEY_DUPLEX,
#                             fontScale = 1.1,
#                             color = (125, 246, 55),
#                             thickness = 3
#                         )
                        new_image = cv2.putText(                           
                            img = img,
                            text = "Score:" + str(score),
                            org = (10, 30),
                            fontFace = cv2.FONT_HERSHEY_DUPLEX,
                            fontScale = 1.1,
                            color = (125, 246, 55),
                            thickness = 3
                        )
                        new_image = cv2.putText(                           
                            img = img,
                            text = str(count_down),
                            org = (590, 30),
                            fontFace = cv2.FONT_HERSHEY_DUPLEX,
                            fontScale = 1.1,
                            color = (125, 246, 55),
                            thickness = 3
                        )
                    
                        cv2.circle(img, (x1, y1), 15, (255, 0, 255), cv2.FILLED)

                        print(x_cord, y_cord)
                        
                        x_cord_range = moved_x_cord + 40
                        x_cord_rangen = moved_x_cord - 40
                        y_cord_range = moved_y_cord + 40
                        y_cord_rangen = moved_y_cord - 40
                        

                        if ((x_cord_range >= x1 >= x_cord_rangen) and (y_cord_range >= y1 >= y_cord_rangen)):

                            score = score + 1
                            times_up = times_up + 5
                            
                            print("match")
                            time.sleep(1)
                            x_cord = random.choice(range(0, 400))
                            y_cord = random.choice(range(0, 300))
                            
                        if int(current_time) > times_up:
                            print("times up")
                            
                            while True:
                                success, img = cap.read()
                                img = detector.findHands(img)
                                lmList, bbox = detector.findPosition(img)
                                if len(lmList) != 0:
                                    x1, y1 = lmList[8][1:]
                                    print(x1, y1)

                                cTime = time.time()
                                fps = 1 / (cTime - pTime)
                                pTime = cTime
                            
                                new_image = cv2.putText(                           
                                    img = img,
                                    text = "GAME OVER",
                                    org = (220, 50),
                                    fontFace = cv2.FONT_HERSHEY_DUPLEX,
                                    fontScale = 1.1,
                                    color = (125, 246, 55),
                                    thickness = 3
                                )
                                new_image = cv2.putText(                           
                                    img = img,
                                    text = "FINALE SCORE:" + str(score),
                                    org = (190, 120),
                                    fontFace = cv2.FONT_HERSHEY_DUPLEX,
                                    fontScale = 1.1,
                                    color = (125, 246, 55),
                                    thickness = 3
                                )
                                new_image = cv2.putText(                           
                                    img = img,
                                    text = "5) BACK TO MAIN MENU     2) TRY AGAIN",
                                    org = (40, 250),
                                    fontFace = cv2.FONT_HERSHEY_DUPLEX,
                                    fontScale = 0.8,
                                    color = (125, 246, 55),
                                    thickness = 3
                                )
                                
#                             if fingers[1] == 1 and fingers[0] == 0 and fingers[3] == 0 and fingers[2] == 1 and fingers[4] == 0 and selection == 0:
                               
                                
                            
                                cv2.imshow("Image", img)

                                cv2.waitKey(1)
                                
                            
                        
                        
                    
                        cv2.imshow("Image", img)

                        cv2.waitKey(1)


            
#         if selection2 == 1:
#             new_image_test = cv2.putText(
#             img = img,
#             text = "OPTION 2 SELECTED",
#             org = (150, 210),
#             fontFace = cv2.FONT_HERSHEY_DUPLEX,
#             fontScale = 1.1,
#             color = (125, 246, 55),
#             thickness = 3
#             )
#             
#         if selection3 == 1:
#             new_image_test = cv2.putText(
#             img = img,
#             text = "OPTION 3 SELECTED",
#             org = (150, 230),
#             fontFace = cv2.FONT_HERSHEY_DUPLEX,
#             fontScale = 1.1,
#             color = (125, 246, 55),
#             thickness = 3
#             )
#             
#         if selection4 == 1:
#             new_image_test = cv2.putText(
#             img = img,
#             text = "OPTION 4 SELECTED",
#             org = (150, 230),
#             fontFace = cv2.FONT_HERSHEY_DUPLEX,
#             fontScale = 1.1,
#             color = (125, 246, 55),
#             thickness = 3
#             )
    

        cv2.imshow("Image", img)

        cv2.waitKey(1)
        
            
            

if __name__ == "__main__":
    main()


